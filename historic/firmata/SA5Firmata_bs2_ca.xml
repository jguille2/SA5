<blocks app="Snap4Arduino 1.0.6 beta http://s4a.cat/snap" version="1"><block-definition s="$robot Tone pin %&apos;pin&apos; | %&apos;freq&apos; Hz %&apos;dur&apos; ms" type="command" category="arduino"><comment w="619" collapsed="false">Emet un so de la freqüència indicada (Hz) durant un temps (valor en milisegons) utilitzant un brunzidor en el pin seleccionat.&#xD;&#xD;-La freqüència accepta valors entre 0 i 65535 Hz. Els valors operatius estarien entre els 32 i els 16000 Hz&#xD;-Durada. Accepta valors fins a 60000 ms, però és una operació bloquejant i no es recomanen valors superiors a 6000 (6 segons) per estalviar desconnexions.&#xD;-El pin per defecte és el 14 (A0), corresponent a la placa Imagina.&#xD;-No s&apos;utilitza la funció Tone d&apos;Arduino. És una funcionalitat bloquejant (el procés de la placa espera acabar per a poder continuar) però d&apos;aquesta manera no s&apos;utilitza el timer2 (necessari per treballar amb IR).</comment><header></header><code></code><inputs><input type="%n">14</input><input type="%n">0</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;//Launcher&#xD;if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;  throw new Error("Required var pin (2-255) and frequency (0-65535)");&#xD;}&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xC7,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;        pin &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="$robot pulseOut pin %&apos;pin&apos; | %&apos;stValue&apos; %&apos;time1&apos; %&apos;time2&apos; %&apos;time3&apos; µs" type="command" category="arduino"><comment w="573" collapsed="false">Envia un pols (alt o baix) des del pin seleccionat.&#xD;&#xD;Els temps (en microsegons) defineixen el pols: temps inicial (previ), temps del pols i temps de l&apos;estat final</comment><header></header><code></code><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>time1</l><l>time2</l><l>time3</l></list><l>board = this.arduino.board;  //Definition should change according to the context&#xD;//Launcher&#xD;var value = 1;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW causes a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;  throw new Error("Required var pin (2-255)");&#xD;}&#xD;//undefined time will be 0 seconds&#xD;var time1 = time1 || 0;&#xD;var time2 = time2 || 0;&#xD;var time3 = time3 || 0;&#xD;//clamping time values to 11 bits&#xD;time1 = time1 &amp; parseInt("011111111111",2);&#xD;time2 = time2 &amp; parseInt("011111111111",2);&#xD;time3 = time3 &amp; parseInt("011111111111",2);&#xD;var data = [0xF0, //START_SYSEX&#xD;        		0xC9,  //microsecondsPulseOut Command&#xD;        		(time1 &gt;&gt; 4) &amp; 0x7F,&#xD;        		((time1 &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((time2 &gt;&gt; 8) &amp; parseInt("0111",2)),&#xD;        		(time2 &gt;&gt; 1) &amp; 0x7F,&#xD;        		((time2 &lt;&lt; 6) &amp; parseInt("01000000",2)) | ((time3 &gt;&gt; 5) &amp; parseInt("0111111",2)),&#xD;      	  	((time3 &lt;&lt; 2) &amp; parseInt("01111100",2)) | ((value &lt;&lt; 1) &amp; parseInt("010",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;      	  	(pin &amp; 0x7F), &#xD;      	  	0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="stValue"/><block var="time1"/><block var="time2"/><block var="time3"/></list></block></script></block-definition><block-definition s="$robot pulseIn (µs) pin %&apos;pin&apos; | %&apos;stValue&apos; llindar: %&apos;timeout&apos; µs" type="reporter" category="arduino"><comment w="778" collapsed="false">Retorna l&apos;amplada del pols (sigui alt o baix) d&apos;un pin en microsegons.&#xD;&#xD;-El llindar per defecte (el màxim que esperarà) és d&apos;un segon (1000000 µs)&#xD;</comment><header></header><code></code><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>timeout</l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;//Response definition&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC8] = function(board) {&#xD;  var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;  var pinResp = (board.currentBuffer[6] &amp; parseInt("0111",2)) &lt;&lt; 5 | (board.currentBuffer[7] &amp; parseInt("011111",2));&#xD;  board.emit("pulseIn-"+pinResp, pulse);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["pulseIn-"+pin] = null;&#xD;//Launcher&#xD;value = 1;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW return a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;  throw new Error("Required var pin (2-255)");&#xD;}&#xD;var timeout = timeout || 0; //undefined will be 0, and 0 causes Arduino&apos;s default (1s)&#xD;timeout = timeout &amp; 0xFFFFFFFF; //clamping value to 32 bits&#xD;board.once("pulseIn-"+pin, function(data){report.arduino["pulseIn-"+pin] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xC8,  //PulseIn Command&#xD;        		(timeout &gt;&gt; 25) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 18) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 11) &amp; 0x7F,&#xD;      	  	(timeout &gt;&gt; 4) &amp; 0x7F,&#xD;      		  ((timeout &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((value &lt;&lt; 2) &amp; parseInt("0100",2)) | ((pin &gt;&gt; 6) &amp; parseInt("011",2)),&#xD;      		  (pin &amp; parseInt("0111111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data)) ;</l></block><list><block var="pin"/><block var="stValue"/><block var="timeout"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return (this.arduino["pulseIn-"+pin] != null);</l></block><list><block var="pin"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return this.arduino["pulseIn-"+pin];</l></block><list><block var="pin"/></list></block></block></script></block-definition><block-definition s="$robot ping (cm) Trig %&apos;pinSen&apos; Echo %&apos;pinRec&apos; pols %&apos;time1&apos; %&apos;time2&apos; µs" type="reporter" category="arduino"><comment w="658" collapsed="false">Retorna la distància (en cm)  mitjançant un sensor d&apos;ultrasons.&#xD;&#xD;-El rang de treball és entre 3 i 400 cm. Els objectes més llunyans retornen el valor 1000.&#xD;-Cal seleccionar els pins de connexió (trigger i echo).&#xD;-Es pot modificar el pols d&apos;emissió. Per defecte envia un pols de 5 µs després d&apos;un estat previ baix durant 2µs.&#xD;-El càlcul de la distància utilitza un velocitat del so de 343m/s (valor en aire sec a 20ºC).</comment><header></header><code></code><inputs><input type="%n">4</input><input type="%n">2</input><input type="%n">2</input><input type="%n">5</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>pinRec</l><l>pinSen</l><l>time1</l><l>time2</l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;//Response definition&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xCA] = function(board) {&#xD;  var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 9| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 2 | (board.currentBuffer[4] &amp; parseInt("01100000",2)) &gt;&gt; 5;&#xD;  var pinResponse = (board.currentBuffer[4] &amp; parseInt("011111",2)) &lt;&lt; 3 | (board.currentBuffer[5] &amp; parseInt("0111",2));&#xD;  board.emit("ping-"+pinResponse, pulse);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["ping-"+pinRec] = null;&#xD;//Launcher&#xD;if (pinSen === undefined || pinSen &lt;= 1 || pinSen &gt; 255 || pinRec === undefined || pinRec &lt;= 1 || pinRec &gt; 255) {&#xD;  throw new Error("Required vars pinSen and pinRec (2-255)");&#xD;}&#xD;board.once("ping-"+pinRec, function(data){report.arduino["ping-"+pinRec] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xCA,  //Ping Command&#xD;        		(pinSen &gt;&gt; 1) &amp; 0x7F,&#xD;        		(pinSen &lt;&lt; 6) | (time1 &amp; parseInt("011111",2)),&#xD;        		(pinRec &gt;&gt; 1) &amp; 0x7F,&#xD;      		  (pinRec &lt;&lt; 6) | (time2 &amp; parseInt("011111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pinRec"/><block var="pinSen"/><block var="time1"/><block var="time2"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>return (this.arduino["ping-"+pinRec] != null);</l></block><list><block var="pinRec"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var value = Math.round(this.arduino["ping-"+pinRec]/29.15/2);&#xD;if (value == 0) return 1000;&#xD;return value;</l></block><list><block var="pinRec"/></list></block></block></script></block-definition><block-definition s="$robot Nunchuk %&apos;opt&apos;" type="reporter" category="arduino"><comment w="472" collapsed="false">Retorna els valors dels sensors d&apos;un Nunchuk connectat als ports I2C.&#xD;&#xD;-Sensors: Joystick (joyX i joyY), butons ( butC i butZ) i acceleròmetres (accX, accY i accZ)&#xD;-Les connexions del Nunchuk per I2C utilitzen els pins SCL, SDA, Ground i Vcc</comment><header></header><code></code><inputs><input type="%txt" readonly="true">joyX<options>joyX
joyY
butZ
butC
accX
accY
accZ</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>command</l></list><l>//Nunchuk command&#xD;var cCode;&#xD;if (command == "joyX") cCode = 0xC0;&#xD;if (command == "joyY") cCode = 0xC1;&#xD;if (command == "butZ") cCode = 0xC2;&#xD;if (command == "butC") cCode = 0xC3;&#xD;if (command == "accX") cCode = 0xC4;&#xD;if (command == "accY") cCode = 0xC5;&#xD;if (command == "accZ") cCode = 0xC6;&#xD;//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[cCode] = function(board) {&#xD;  if (command == "butZ" || command == "butC") {&#xD;    var value = (board.currentBuffer[2] &amp; 0x7F);&#xD;  } else {&#xD;    var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;  }&#xD; 	board.emit(command, value);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.nun = new Object();&#xD;this.arduino.nun[command] = null;&#xD;//Launcher&#xD;board.once(command, function(data){myself.nun[command] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;				cCode,//nunchuk command&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="opt"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>return (this.arduino.nun[command] != null);</l></block><list><block var="opt"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>return this.arduino.nun[command];</l></block><list><block var="opt"/></list></block></block></script></block-definition><block-definition s="$robot DHT11 %&apos;param&apos; al pin %&apos;pin&apos;" type="reporter" category="arduino"><comment w="381" collapsed="false">Retorna la humitat/temperatura (ºC) d&apos;un sensor  DHT11 connectat al pin seleccionat.</comment><header></header><code></code><inputs><input type="%txt" readonly="true">humitat<options>humitat
temperatura</options></input><input type="%n">4</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var sparam = 0;&#xD;if (param == "temperatura") sparam = 1;&#xD;//Response definition&#xD;&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;      world.Arduino.firmata.SYSEX_RESPONSE[0xCF] = function(board) {&#xD;      	 var response = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 1 | (board.currentBuffer[3] &amp; 0x01);&#xD;       	var rpin = board.currentBuffer[4] &gt;&gt; 1;&#xD;      	 var rparam = board.currentBuffer[4] &amp; parseInt("01",2);&#xD;      	 board.emit("DHT11-"+rpin+"-"+rparam, response);&#xD;      }&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["DHT11-"+pin+"-"+sparam] = null;&#xD;&#xD;//Launcher&#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 63) {&#xD;  throw new Error("Required var pin (2-63)");&#xD;}&#xD;board.once("DHT11-"+pin+"-"+sparam, function(data){report.arduino["DHT11-"+pin+"-"+sparam] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCF,  //DHT11 Command&#xD;      		((pin &lt;&lt; 1) |  sparam) &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="param"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var sparam = 0;&#xD;if (param == "temperatura") sparam = 1;&#xD;return (this.arduino["DHT11-"+pin+"-"+sparam] != null);</l></block><list><block var="pin"/><block var="param"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var sparam = 0;&#xD;if (param == "temperatura") sparam = 1;&#xD;return this.arduino["DHT11-"+pin+"-"+sparam];</l></block><list><block var="pin"/><block var="param"/></list></block></block></script></block-definition><block-definition s="$robot IR %&apos;MESSAGE&apos; Envia com a %&apos;CODER&apos;" type="command" category="arduino"><comment w="525" collapsed="false">Envia com a senyal IR un codi hexadecimal mitjançant un díode emissor connectat al pin 3. Estan disponibles els protocosl Sony i RC5.&#xD;&#xD;Es poden enviar valors entre 0 i  FFFFFF (6 dígits hexadecimals).</comment><header></header><code></code><inputs><input type="%txt">FFFFFF</input><input type="%txt" readonly="true">Sony<options>Sony
RC5</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>message</l><l>coder</l></list><l>//Create blocs wit vars: message (6 hexadecimal digits) and coder (string)&#xD;board = this.arduino.board;  //Definition should change according to the context&#xD;if (message === undefined || coder === undefined) {&#xD;  throw new Error("Message and coder are required");&#xD;}&#xD;var smessage = parseInt(message,16);&#xD;smessage = smessage &amp; parseInt("FFFFFF",16);&#xD;if (coder == "RC5") {&#xD;  scoder = 1;&#xD;} else {&#xD;  scoder = 0;&#xD;}&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCE,  //Send IR&#xD;      		(smessage &gt;&gt; 17) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 10) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 3) &amp; 0x7F,&#xD;      		((smessage &lt;&lt; 4) &amp; parseInt("01110000",2)) | (scoder &amp; parseInt("01111",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="MESSAGE"/><block var="CODER"/></list></block></script></block-definition><block-definition s="$robot %&apos;ACTIVA&apos; IR rec" type="command" category="arduino"><comment w="460" collapsed="false">Habilita/Inhabilita la funció de recepció IR.&#xD;&#xD;-Per defecte està inhabilitada.&#xD;-Habilitant la recepció IR deixan de funcionar el control de pulsos PWM dels pins 3 i 11.&#xD;-Inhabilitant l&apos;IR torna a estar disponible els PWM dels pins 3 i 11.</comment><header></header><code></code><inputs><input type="%txt" readonly="true">Habilita<options>Habilita
Inhabilita</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list><l>ac</l></list><l>if (ac == "Habilita") {&#xD;  dat = 0xCC;&#xD;} else {&#xD;  dat = 0xCD;&#xD;}&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;//Launcher&#xD;var data =[0xF0,//START_SYSEX&#xD;				dat,//IR act/desact command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="ACTIVA"/></list></block></script></block-definition><block-definition s="$robot IR rec" type="reporter" category="arduino"><comment w="462" collapsed="false">Retorna el codi IR (hexadecimal) obtingut per un receptor IR connectat al pin 11.&#xD;&#xD;-Cal habilitar abans la recepció IR. En fer-ho es perd la funcionalitat PWM sobre els pins 3 i 11.&#xD;-Després d&apos;utilitzar la recepció IR podem inhabilitar-la per tornar a disposar del control PWM sobre els pins 3 i 11.</comment><header></header><code></code><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[2].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload SA5Firmata2.ino a higher version");&#xD;}</l></block><list></list></block><block s="doRun"><block s="reportJSFunction"><list></list><l>board = this.arduino.board; //Definition should change according to the context&#xD;//Response definition&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xCB] = function(board) {&#xD;  var irResult = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;  irResult = irResult &amp; 0xFFFFFF;&#xD;  board.emit("IRrec", irResult);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["IRrec"] = null;&#xD;//Launcher&#xD;board.once("IRrec", function(data){report.arduino["IRrec"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0xCB,//IR recv command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return (this.arduino["IRrec"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return this.arduino["IRrec"].toString(16);</l></block><list></list></block></block></script></block-definition></blocks>
