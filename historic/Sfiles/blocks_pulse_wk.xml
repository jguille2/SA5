<blocks app="Snap4Arduino 1.0.6 beta http://s4a.cat/snap" version="1"><block-definition s="Nunchuk %&apos;opt&apos;" type="reporter" category="other"><header></header><code></code><inputs><input type="%txt" readonly="true">joyX<options>joyX
joyY
butZ
butC
accX
accY
accZ</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>board = this.arduino.board; //Definition should change according to the context
    var checkedFirmware = false;
    for (i = 2; i &lt; (board.pins.length - 1); i++) {
        if (!(board.pins[i].supportedModes.indexOf(0x05) === -1)) {
           checkedFirmware = true;
           break;
        }
    }
    if (!checkedFirmware) {
        throw new Error("Please upload ImaginaFirmata to the board");
    }
</l></block><list></list></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC0] = function(board) {
      	var joyX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);
      	board.emit("joyX", joyX);
      }
//
myself = this.arduino;
this.arduino.joyX = null;
      board.once("joyX", function(data){myself.joyX = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC0,//joyX command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC1] = function(board) {
      	var joyY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);
      	board.emit("joyY", joyY);
      }
//
myself = this.arduino;
this.arduino.joyY = null;
      board.once("joyY", function(data){myself.joyY = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC1,//joyY command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC2] = function(board) {
      	var butZ = (board.currentBuffer[2] &amp; 0x7F);
      	board.emit("butZ", butZ);
      }
//
myself = this.arduino;
this.arduino.butZ = null;
      board.once("butZ", function(data){myself.butZ = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC2,//butZ command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butZ;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butC</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC3] = function(board) {
      	var butC = (board.currentBuffer[2] &amp; 0x7F);
      	board.emit("butC", butC);
      }
//
myself = this.arduino;
this.arduino.butC = null;
      board.once("butC", function(data){myself.butC = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC3,//butC command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butC != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butC;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC4] = function(board) {
      	var accX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);
      	board.emit("accX", accX);
      }
//
myself = this.arduino;
this.arduino.accX = null;
      board.once("accX", function(data){myself.accX = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC4,//accX command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC5] = function(board) {
      	var accY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);
      	board.emit("accY", accY);
      }
//
myself = this.arduino;
this.arduino.accY = null;
      board.once("accY", function(data){myself.accY = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC5,//accX command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition
      board = this.arduino.board; //Definition should change according to the context
      world.Arduino.firmata.SYSEX_RESPONSE[0xC6] = function(board) {
      	var accZ = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);
      	board.emit("accZ", accZ);
      }
//
myself = this.arduino;
this.arduino.accZ = null;
      board.once("accZ", function(data){myself.accZ = data;});
      var sdata =[0xF0,//START_SYSEX,
				0xC6,//accX command
				0xF7//END_SYSEX
	  ];
      board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accZ;</l></block><list></list></block></block></script></block></script></block-definition><block-definition s="Tone %&apos;pin&apos; pin - %&apos;freq&apos; Hz - %&apos;dur&apos; mseg" type="command" category="other"><header></header><code></code><inputs><input type="%n">14</input><input type="%n">440</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>board = this.arduino.board; //Definition should change according to the context
    if (board.pins[pin].supportedModes.indexOf(0x05) === -1) {
        throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");
    }
      //Create blocs wit vars: pin, freq (frequency 0-65535 Hz) and dur (duration 0-4294967 mseg)
      if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {
        throw new Error("Required var pin (2-255) and frequency (0-65535)");
      }
      var dur = dur || 0;
      dur = dur &amp; 0xFFFF; //clamping value to 32 bits
      var data =[0xF0, //START_SYSEX
      		0xC7,  //Tone Command
      		(dur &gt;&gt; 25) &amp; 0x7F,
      		(dur &gt;&gt; 18) &amp; 0x7F,
      		(dur &gt;&gt; 11) &amp; 0x7F,
      		(dur &gt;&gt; 4) &amp; 0x7F,
      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),
      		(freq &gt;&gt; 6) &amp; 0x7F,
      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),
      		pin &amp; 0x7F,
      		0xF7  //END_SYSEX
      ];
      board.transport.write(new Buffer(data));
</l></block><list><block var="pin"/><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="pulseIn %&apos;pin&apos; pin -- %&apos;value&apos; value -- %&apos;timeout&apos; microseconds" type="reporter" category="other"><header></header><code></code><inputs><input type="%n"></input><input type="%n" readonly="true">1<options>HIGH = 1
LOW = 0</options></input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>value</l><l>timeout</l></list><l>//Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC8] = function(board) {&#xD;  var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;  var pin = (board.currentBuffer[6] &amp; 0x7F) &lt;&lt; 5 | (board.currentBuffer[7] &amp; parseInt("011111",2));&#xD;  //&#xD;  board.emit("pulseIn", pulse);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;//this.arduino["pulseIn-"+pin] = null;&#xD;this.arduino.pulseIn = null;&#xD;//Launcher&#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255 || value &lt; 0 || value &gt; 1) {&#xD;  throw new Error("Required var pin (2-255) and value (0/1)");&#xD;}&#xD;var timeout = timeout || 0;&#xD;timeout = timeout &amp; 0xFFFF; //clamping value to 32 bits&#xD;//board.once("pulseIn-"+pin, function(data){report.arduino["pulseIn-"+pin] = data;});&#xD;board.once("pulseIn", function(data){report.arduino.pulseIn = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xC8,  //PulseIn Command&#xD;        		(timeout &gt;&gt; 25) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 18) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 11) &amp; 0x7F,&#xD;      	  	(timeout &gt;&gt; 4) &amp; 0x7F,&#xD;      		  ((timeout &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((value &lt;&lt; 2) &amp; parseInt("0100",2)) | ((pin &gt;&gt; 6) &amp; parseInt("011",2)),&#xD;      		  (pin &amp; parseInt("0111111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="value"/><block var="timeout"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return (this.arduino.pulseIn != null);</l></block><list><block var="pin"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return this.arduino.pulseIn;</l></block><list><block var="pin"/></list></block></block></script></block-definition></blocks>
