<blocks app="Snap4Arduino 1.0.6 beta http://s4a.cat/snap" version="1"><block-definition s="$robot Nunchuk %&apos;opt&apos;" type="reporter" category="arduino"><header></header><code></code><inputs><input type="%txt" readonly="true">joyX<options>joyX
joyY
butZ
butC
accX
accY
accZ</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>//Imagina begins&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;var checkedFirmware = false;&#xD;for (i = 2; i &lt; (board.pins.length - 1); i++) {&#xD;  if (!(board.pins[i].supportedModes.indexOf(0x05) === -1)) {&#xD;    checkedFirmware = true;&#xD;    break;&#xD;  }&#xD;}&#xD;if (!checkedFirmware) {&#xD;  throw new Error("Please upload ImaginaFirmata to the board");&#xD;}
</l></block><list></list></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC0] = function(board) {&#xD;  var joyX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD; 	board.emit("joyX", joyX);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.joyX = null;&#xD;//Launcher&#xD;board.once("joyX", function(data){myself.joyX = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;      
				0xC0,//joyX command&#xD;
		      		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>joyY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC1] = function(board) {&#xD;  var joyY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD; 	board.emit("joyY", joyY);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.joyY = null;&#xD;//Launcher&#xD;board.once("joyY", function(data){myself.joyY = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;      
				0xC1,//joyY command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.joyY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.joyY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC2] = function(board) {&#xD;  var butZ = (board.currentBuffer[2] &amp; 0x7F);&#xD; 	board.emit("butZ", butZ);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;
this.arduino.butZ = null;&#xD;//Launcher&#xD;board.once("butZ", function(data){myself.butZ = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;      
				0xC2,//butZ command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butZ;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>butC</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC3] = function(board) {&#xD;  var butC = (board.currentBuffer[2] &amp; 0x7F);&#xD; 	board.emit("butC", butC);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.butC = null;&#xD;//Launcher&#xD;board.once("butC", function(data){myself.butC = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;      
				0xC3,//butC command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.butC != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.butC;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accX</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC4] = function(board) {&#xD;  var accX = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD; 	board.emit("accX", accX);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.accX = null;&#xD;//Launcher&#xD;board.once("accX", function(data){myself.accX = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;      
				0xC4,//accX command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accX != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accX;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accY</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC5] = function(board) {&#xD;  var accY = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD; 	board.emit("accY", accY);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.accY = null;&#xD;//Launcher&#xD;board.once("accY", function(data){myself.accY = data;});&#xD;var sdata =[0xF0,//START_SYSEX&#xD;      
				0xC5,//accY command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accY != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accY;</l></block><list></list></block></block></script></block><block s="doIf"><block s="reportEquals"><block var="opt"/><l>accZ</l></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>//Sysex Response definition&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC6] = function(board) {&#xD;  var accZ = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD; 	board.emit("accZ", accZ);&#xD;}&#xD;//Async query&#xD;myself = this.arduino;&#xD;this.arduino.accZ = null;&#xD;//Launcher&#xD;board.once("accZ", function(data){myself.accZ = data;});&#xD;var sdata =[0xF0,//START_SYSEX&#xD;      
				0xC6,//accZ command&#xD;      
				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));
</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (this.arduino.accZ != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return this.arduino.accZ;</l></block><list></list></block></block></script></block></script></block-definition><block-definition s="$robot Tone %&apos;pin&apos; pin - %&apos;freq&apos; Hz - %&apos;dur&apos; mseg" type="command" category="arduino"><header></header><code></code><inputs><input type="%n">14</input><input type="%n">0</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>//Imagina begins&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[pin].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");&#xD;}&#xD;//Launcher&#xD;if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;  throw new Error("Required var pin (2-255) and frequency (0-65535)");&#xD;}&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD; 
      		0xC7,  //Tone Command&#xD; 
      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD; 
      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD; 
      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD; 
      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD; 
      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD; 
      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD; 
      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;        		pin &amp; 0x7F,&#xD; 
      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));
</l></block><list><block var="pin"/><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="$robot pulseIn %&apos;pin&apos; pin -- %&apos;stValue&apos; pulse -- %&apos;timeout&apos; microseconds" type="reporter" category="arduino"><header></header><code></code><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>timeout</l></list><l>//Imagina begins&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[pin].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");&#xD;}&#xD;//Response definition&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xC8] = function(board) {&#xD;  var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;  var pinResp = (board.currentBuffer[6] &amp; parseInt("0111",2)) &lt;&lt; 5 | (board.currentBuffer[7] &amp; parseInt("011111",2));&#xD;  board.emit("pulseIn-"+pinResp, pulse);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["pulseIn-"+pin] = null;&#xD;//Launcher&#xD;value = 1;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW return a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;  throw new Error("Required var pin (2-255)");&#xD;}&#xD;var timeout = timeout || 0; //undefined will be 0, and 0 causes Arduino&apos;s default (1s)&#xD;timeout = timeout &amp; 0xFFFFFFFF; //clamping value to 32 bits&#xD;board.once("pulseIn-"+pin, function(data){report.arduino["pulseIn-"+pin] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xC8,  //PulseIn Command&#xD;        		(timeout &gt;&gt; 25) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 18) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 11) &amp; 0x7F,&#xD;      	  	(timeout &gt;&gt; 4) &amp; 0x7F,&#xD;      		  ((timeout &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((value &lt;&lt; 2) &amp; parseInt("0100",2)) | ((pin &gt;&gt; 6) &amp; parseInt("011",2)),&#xD;      		  (pin &amp; parseInt("0111111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="stValue"/><block var="timeout"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return (this.arduino["pulseIn-"+pin] != null);</l></block><list><block var="pin"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>return this.arduino["pulseIn-"+pin];</l></block><list><block var="pin"/></list></block></block></script></block-definition><block-definition s="$robot ping (cm) -Sender Pin: %&apos;pinSen&apos; -Receiver Pin: %&apos;pinRec&apos; -Pulse times: %&apos;time1&apos; µs %&apos;time2&apos; µs" type="reporter" category="arduino"><header></header><code></code><inputs><input type="%n">4</input><input type="%n">2</input><input type="%n">2</input><input type="%n">5</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pinRec</l><l>pinSen</l><l>time1</l><l>time2</l></list><l>//Imagina begins&#xD;board = this.arduino.board; //Definition should change according to the context&#xD;if (board.pins[pinRec].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");&#xD;}&#xD;//Response definition&#xD;world.Arduino.firmata.SYSEX_RESPONSE[0xCA] = function(board) {&#xD;  var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 9| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 2 | (board.currentBuffer[4] &amp; parseInt("01100000",2)) &gt;&gt; 5;&#xD;  var pinResponse = (board.currentBuffer[4] &amp; parseInt("011111",2)) &lt;&lt; 3 | (board.currentBuffer[5] &amp; parseInt("0111",2));&#xD;  board.emit("ping-"+pinResponse, pulse);&#xD;}&#xD;//Async reporting&#xD;report = this;&#xD;this.arduino["ping-"+pinRec] = null;&#xD;//Launcher&#xD;if (pinSen === undefined || pinSen &lt;= 1 || pinSen &gt; 255 || pinRec === undefined || pinRec &lt;= 1 || pinRec &gt; 255) {&#xD;  throw new Error("Required vars pinSen and pinRec (2-255)");&#xD;}&#xD;board.once("ping-"+pinRec, function(data){report.arduino["ping-"+pinRec] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xCA,  //Ping Command&#xD;        		(pinSen &gt;&gt; 1) &amp; 0x7F,&#xD;        		(pinSen &lt;&lt; 6) | (time1 &amp; parseInt("011111",2)),&#xD;        		(pinRec &gt;&gt; 1) &amp; 0x7F,&#xD;      		  (pinRec &lt;&lt; 6) | (time2 &amp; parseInt("011111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pinRec"/><block var="pinSen"/><block var="time1"/><block var="time2"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>return (this.arduino["ping-"+pinRec] != null);</l></block><list><block var="pinRec"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var value = Math.round(this.arduino["ping-"+pinRec]/29.41/2);&#xD;if (value == 0) return 1000;&#xD;return value;</l></block><list><block var="pinRec"/></list></block></block></script></block-definition><block-definition s="$robot pulseOut %&apos;pin&apos; pin-- %&apos;stValue&apos; pulse -- Times: %&apos;time1&apos; %&apos;time2&apos; %&apos;time3&apos; µs" type="command" category="arduino"><header></header><code></code><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>time1</l><l>time2</l><l>time3</l></list><l>//Imagina begins&#xD;board = this.arduino.board;  //Definition should change according to the context&#xD;if (board.pins[pin].supportedModes.indexOf(0x05) === -1) {&#xD;  throw new Error("Please upload ImaginaFirmata to the board and use a digital pin");&#xD;}&#xD;//Launcher&#xD;var value = 1;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW causes a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;  throw new Error("Required var pin (2-255)");&#xD;}&#xD;//undefined time will be 0 seconds&#xD;var time1 = time1 || 0;&#xD;var time2 = time2 || 0;&#xD;var time3 = time3 || 0;&#xD;//clamping time values to 11 bits&#xD;time1 = time1 &amp; parseInt("011111111111",2);&#xD;time2 = time2 &amp; parseInt("011111111111",2);&#xD;time3 = time3 &amp; parseInt("011111111111",2);&#xD;var data = [0xF0, //START_SYSEX&#xD;        		0xC9,  //microsecondsPulseOut Command&#xD;        		(time1 &gt;&gt; 4) &amp; 0x7F,&#xD;        		((time1 &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((time2 &gt;&gt; 8) &amp; parseInt("0111",2)),&#xD;        		(time2 &gt;&gt; 1) &amp; 0x7F,&#xD;        		((time2 &lt;&lt; 6) &amp; parseInt("01000000",2)) | ((time3 &gt;&gt; 5) &amp; parseInt("0111111",2)),&#xD;      	  	((time3 &lt;&lt; 2) &amp; parseInt("01111100",2)) | ((value &lt;&lt; 1) &amp; parseInt("010",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;      	  	(pin &amp; 0x7F), &#xD;      	  	0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="stValue"/><block var="time1"/><block var="time2"/><block var="time3"/></list></block></script></block-definition></blocks>
